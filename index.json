[{"content":"在conda环境下安装依赖 CUDA 参考\n编译环境和图像处理库 conda install -c conda-forge cmake pkg-config -y #需要指定版本，编译时可能需要 conda install -c conda-forge gcc=11.4.0 gxx=11.4.0 gcc_linux-64=11.4.0 gxx_linux-64=11.4.0 -y conda install -c conda-forge numpy -y conda install -c conda-forge libjpeg-turbo libpng libtiff libwebp libavif -y conda install -c conda-forge eigen ffmpeg libgl ocl-icd-system -y conda install -c conda-forge hdf5 openblas lapack -y conda install -c conda-forge tbb vtk tesseract -y conda install -c conda-forge matplotlib scipy scikit-learn scikit-image -y conda install -c conda-forge libstdcxx-ng libgcc-ng libarchive -y conda install -c conda-forge gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav -y conda install -c conda-forge libgfortran ncurses -y conda install -c conda-forge x264 x265 jasper openexr -y conda install -c conda-forge qt -y #需要指定版本，编译时可能需要 conda install -c conda-forge libgfortran=3 -y 编译 # 拉取源码 git clone https://github.com/opencv/opencv_contrib.git git clone https://github.com/opencv/opencv.git # checkout特定版本，上述参数测试可用于4.8.1 cd opencv \u0026amp;\u0026amp; git checkout 4.8.1 \u0026amp;\u0026amp; cd .. cd opencv_contrib \u0026amp;\u0026amp; git checkout 4.8.1 \u0026amp;\u0026amp; cd .. # （可选）使用编解码硬件加速需要 cp Video_Codec_SDK_13.0.19/Interface/* $CONDA_PREFIX/include/ cp Video_Codec_SDK_13.0.19/Lib/linux/stubs/x86_64/* $CONDA_PREFIX/lib/ # 创建输出目录 mkdir build \u0026amp;\u0026amp; cd build 编译指令 # 配置编译参数 cmake .. \\ -D CMAKE_BUILD_TYPE=RELEASE \\ -D CMAKE_INSTALL_PREFIX=$CONDA_PREFIX \\ -D CMAKE_INSTALL_RPATH=$CONDA_PREFIX/lib \\ -D CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \\ -D CMAKE_SKIP_RPATH=OFF \\ -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\ -D WITH_CUDA=ON \\ -D CUDA_ARCH_BIN=\u0026#34;8.9\u0026#34; \\ -D CUDA_HOST_COMPILER=$(which gcc) \\ -D CMAKE_CUDA_COMPILER=$(which nvcc) \\ -D CUDA_TOOLKIT_ROOT_DIR=$CONDA_PREFIX \\ -D WITH_CUDNN=ON \\ -D OPENCV_DNN_CUDA=ON \\ -D ENABLE_FAST_MATH=ON \\ -D CUDA_FAST_MATH=ON \\ -D WITH_CUBLAS=ON \\ -D BUILD_opencv_python3=ON \\ -D PYTHON3_EXECUTABLE=$CONDA_PREFIX/bin/python \\ -D PYTHON3_INCLUDE_DIR=$CONDA_PREFIX/include/python3.12 \\ -D PYTHON3_LIBRARY=$CONDA_PREFIX/lib/libpython3.12.so \\ -D PYTHON3_NUMPY_INCLUDE_DIRS=$CONDA_PREFIX/lib/python3.12/site-packages/numpy/_core/include \\ -D PYTHON3_PACKAGES_PATH=$CONDA_PREFIX/lib/python3.12/site-packages \\ -D WITH_GSTREAMER=ON \\ -D WITH_FFMPEG=ON \\ -D BUILD_opencv_python2=OFF \\ -D BUILD_TESTS=OFF \\ -D BUILD_PERF_TESTS=OFF \\ -D ENABLE_CCACHE=OFF \\ -D ENABLE_CUDA_FIRST_CLASS_LANGUAGE=ON \\ # 编译安装 # 根据cpu核心数调整参数 make -j 12 # 安装 make install 验证安装 import cv2 print(cv2.__version__) print(cv2.cuda.getCudaEnabledDeviceCount()) PROBLEMS 缺少libcuda* 文件 ln -sf /usr/lib/x86_64-linux-gnu/libcuda* $CONDA_PREFIX/lib/ 缺少libstdc++.so.6 ln -sf /usr/lib64/libstdc++.so.6 /home/hjk/miniconda3/lib/libstdc++.so.6 其他可能解决方案 conda install libarchive ","permalink":"https://blog.bocchi.icu/posts/opencv_cuda/","summary":"summary","title":"编译支持CUDA加速的opencv"},{"content":"安装miniconda mkdir -p ~/miniconda3 wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 rm ~/miniconda3/miniconda.sh source ~/miniconda3/bin/activate conda init --all 在conda环境内安装cuda-toolkit conda install nvidia/label/cuda-12.4.1::cuda-toolkit -y conda install nvidia/label/cuda-12.4.1::cuda-nvcc -y conda install cudnn cuda-version=12.4 -c nvidia -y conda install nvidia/label/cuda-12.4.1::cuda-cudart -y conda install nvidia/label/cuda-12.4.1::libcublas -y conda install nvidia/label/cuda-12.4.1::libnpp -y conda install nvidia/label/cuda-12.4.1::cuda-opencl -y conda install nvidia/label/cuda-12.4.1::libcufft -y # 自动设置环境变量 mkdir -p $CONDA_PREFIX/etc/conda/activate.d echo \u0026#34;export PATH=$CONDA_PREFIX/bin:\\$PATH\u0026#34; \u0026gt;\u0026gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh echo \u0026#34;export LD_LIBRARY_PATH=$CONDA_PREFIX/lib:\\$LD_LIBRARY_PATH\u0026#34; \u0026gt;\u0026gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh echo \u0026#34;export CUDA_HOME=$CONDA_PREFIX\u0026#34; \u0026gt;\u0026gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh # 对应cuda版本 pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 # https://pytorch.org/get-started/previous-versions/ 验证 nvcc -V （可选）安装TensorRT pip3 install --upgrade tensorrt echo \u0026#34;export LD_LIBRARY_PATH=$CONDA_PREFIX/lib/python3.12/site-packages/tensorrt_libs:\\$LD_LIBRARY_PATH\u0026#34; \u0026gt;\u0026gt; $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh ","permalink":"https://blog.bocchi.icu/posts/cuda_in_conda_env/","summary":"summary","title":"在conda环境下安装和管理CUDA版本"},{"content":"","permalink":"https://blog.bocchi.icu/pages/about/","summary":"","title":""}]